[{"/Users/basilevernouillet/work/perso/bazify/cra-front/src/index.jsx":"1","/Users/basilevernouillet/work/perso/bazify/cra-front/src/Router.jsx":"2","/Users/basilevernouillet/work/perso/bazify/cra-front/src/Player.jsx":"3","/Users/basilevernouillet/work/perso/bazify/cra-front/src/api.js":"4","/Users/basilevernouillet/work/perso/bazify/cra-front/src/CurrentSong.jsx":"5","/Users/basilevernouillet/work/perso/bazify/cra-front/src/Songs.jsx":"6","/Users/basilevernouillet/work/perso/bazify/cra-front/src/Song.jsx":"7","/Users/basilevernouillet/work/perso/bazify/cra-front/src/contexts/song.js":"8","/Users/basilevernouillet/work/perso/bazify/cra-front/src/hooks/usePlayer.js":"9","/Users/basilevernouillet/work/perso/bazify/cra-front/src/hooks/usePlay.js":"10","/Users/basilevernouillet/work/perso/bazify/cra-front/src/hooks/useMediaSession.js":"11","/Users/basilevernouillet/work/perso/bazify/cra-front/src/Player.old.jsx":"12","/Users/basilevernouillet/work/perso/bazify/cra-front/src/CurrentSong.copy.tsx":"13","/Users/basilevernouillet/work/perso/bazify/cra-front/src/hooks/useAudioPlayer.ts":"14"},{"size":594,"mtime":1612105553275,"results":"15","hashOfConfig":"16"},{"size":309,"mtime":1612105650231,"results":"17","hashOfConfig":"16"},{"size":655,"mtime":1612111230571,"results":"18","hashOfConfig":"16"},{"size":218,"mtime":1611833319743,"results":"19","hashOfConfig":"16"},{"size":2202,"mtime":1612110320124,"results":"20","hashOfConfig":"16"},{"size":304,"mtime":1612107478241,"results":"21","hashOfConfig":"16"},{"size":442,"mtime":1612110577919,"results":"22","hashOfConfig":"16"},{"size":217,"mtime":1612106508142,"results":"23","hashOfConfig":"16"},{"size":3475,"mtime":1612105350513,"results":"24","hashOfConfig":"16"},{"size":482,"mtime":1612108387534,"results":"25","hashOfConfig":"16"},{"size":734,"mtime":1612108416238,"results":"26","hashOfConfig":"16"},{"size":7487,"mtime":1612110143740,"results":"27","hashOfConfig":"16"},{"size":1283,"mtime":1612111283315,"results":"28","hashOfConfig":"16"},{"size":1301,"mtime":1612111208915,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"zqo4nm",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/basilevernouillet/work/perso/bazify/cra-front/src/index.jsx",[],["63","64"],"/Users/basilevernouillet/work/perso/bazify/cra-front/src/Router.jsx",[],"/Users/basilevernouillet/work/perso/bazify/cra-front/src/Player.jsx",["65"],"/Users/basilevernouillet/work/perso/bazify/cra-front/src/api.js",[],"/Users/basilevernouillet/work/perso/bazify/cra-front/src/CurrentSong.jsx",["66","67"],"import { useEffect } from \"react\";\nimport styles from \"./styles/Player.module.scss\";\n\nfunction CurrentSong({\n  playerRef,\n  currentSong,\n  prevSong,\n  playOrPause,\n  pause,\n  currentTime,\n  nextSong,\n  timelineRef,\n  playheadRef,\n  hoverPlayheadRef,\n}) {\n  useEffect(() => {\n    if (\"mediaSession\" in navigator) {\n      navigator.mediaSession.metadata = new window.MediaMetadata({\n        title: currentSong.title,\n        artist: currentSong.artist?.name,\n        album: currentSong.album?.name,\n        artwork: [\n          {\n            src: currentSong.album?.picture || \"\",\n          },\n        ],\n      });\n\n      navigator.mediaSession.setActionHandler(\"previoustrack\", prevSong);\n      navigator.mediaSession.setActionHandler(\"nexttrack\", nextSong);\n    }\n  }, [currentSong]);\n\n  useEffect(() => {\n    playerRef.current.load();\n  }, [currentSong]);\n\n  return (\n    <div className={styles.currentSong}>\n      <audio ref={playerRef}>\n        <source src={currentSong.s3_link} type=\"audio/ogg\" />\n        Your browser does not support the audio element.\n      </audio>\n      <div className={styles.infos}>\n        <img src={currentSong.album?.picture} alt=\"\" />\n        <div className=\"\">\n          <h1>{currentSong.title}</h1>\n          <h2>{currentSong.artist?.name}</h2>\n          <h3>{currentSong.album?.title}</h3>\n        </div>\n      </div>\n      <div className={styles.playing}>\n        <div className={styles.timeline}>\n          <div className={styles.time}>\n            <div className=\"current-time\">{currentTime}</div>\n            <div className=\"end-time\">{currentSong.duration}</div>\n          </div>\n\n          <div ref={timelineRef} id=\"timeline\">\n            <div ref={playheadRef} id=\"playhead\"></div>\n            <div\n              ref={hoverPlayheadRef}\n              className=\"hover-playhead\"\n              data-content=\"0:00\"\n            ></div>\n          </div>\n        </div>\n        <div className={styles.controls}>\n          <button onClick={prevSong}>last</button>\n          <button onClick={playOrPause}>{!pause ? \"play\" : \"pause\"}</button>\n          <button onClick={nextSong}>next</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CurrentSong;\n",["68","69"],"/Users/basilevernouillet/work/perso/bazify/cra-front/src/Songs.jsx",[],"/Users/basilevernouillet/work/perso/bazify/cra-front/src/Song.jsx",[],"/Users/basilevernouillet/work/perso/bazify/cra-front/src/contexts/song.js",[],"/Users/basilevernouillet/work/perso/bazify/cra-front/src/hooks/usePlayer.js",["70","71","72"],"import { useEffect, useState } from \"react\";\n\n/**\n *\n * @param {object} object DOM references\n * @param {object} object React states\n * @param {object} object React state setters\n */\nexport default function usePlayer(\n  { playerRef, timelineRef, playheadRef, hoverPlayheadRef },\n  { musics, index, pause },\n  { setCurrentTime, setIndex, setPause }\n) {\n  const [musicsState, setMusicsState] = useState(null);\n\n  useEffect(() => {\n    setMusicsState(musics);\n  }, [musics]);\n\n  const timeUpdate = () => {\n    const duration = playerRef.current.duration;\n    const timelineWidth =\n      timelineRef.current.offsetWidth - playheadRef.current.offsetWidth;\n    const playPercent = 100 * (playerRef.current.currentTime / duration);\n    playheadRef.current.style.width = playPercent + \"%\";\n    setCurrentTime(formatTime(parseInt(playerRef.current.currentTime)));\n  };\n\n  const formatTime = (currentTime) => {\n    const minutes = Math.floor(currentTime / 60);\n    let seconds = Math.floor(currentTime % 60);\n\n    seconds = seconds >= 10 ? seconds : \"0\" + (seconds % 60);\n\n    const formatTime = minutes + \":\" + seconds;\n\n    return formatTime;\n  };\n\n  const updatePlayer = () => {\n    const currentSong = musics[index];\n    const audio = new Audio(currentSong.s3_link);\n    playerRef.current.load();\n  };\n\n  const nextSong = () => {\n    console.log({\n      musics,\n      musicsState,\n      index,\n    });\n\n    setIndex((index + 1) % musics.length);\n    updatePlayer();\n    if (pause) {\n      playerRef.current.play();\n    }\n  };\n\n  const prevSong = () => {\n    setIndex((index + musics.length - 1) % musics.length);\n    updatePlayer();\n    if (pause) {\n      playerRef.current.play();\n    }\n  };\n\n  const playOrPause = () => {\n    const currentSong = musics[index];\n    const audio = new Audio(currentSong.s3_link);\n    if (!pause) {\n      playerRef.current.play();\n    } else {\n      playerRef.current.pause();\n    }\n    setPause((pause) => !pause);\n  };\n  const changeCurrentTime = (e) => {\n    const duration = playerRef.current.duration;\n\n    const playheadWidth = timelineRef.current.offsetWidth;\n    const offsetWidth = timelineRef.current.offsetLeft;\n    const userClickWidth = e.clientX - offsetWidth;\n\n    const userClickWidthInPercent = (userClickWidth * 100) / playheadWidth;\n\n    playheadRef.current.style.width = userClickWidthInPercent + \"%\";\n    playerRef.current.currentTime = (duration * userClickWidthInPercent) / 100;\n  };\n\n  const hoverTimeLine = (e) => {\n    const duration = playerRef.current.duration;\n\n    const playheadWidth = timelineRef.current.offsetWidth;\n\n    const offsetWidth = timelineRef.current.offsetLeft;\n    const userClickWidth = e.clientX - offsetWidth;\n    const userClickWidthInPercent = (userClickWidth * 100) / playheadWidth;\n\n    if (userClickWidthInPercent <= 100) {\n      hoverPlayheadRef.current.style.width = userClickWidthInPercent + \"%\";\n    }\n\n    const time = (duration * userClickWidthInPercent) / 100;\n\n    if (time >= 0 && time <= duration) {\n      hoverPlayheadRef.current.dataset.content = formatTime(time);\n    }\n  };\n\n  const resetTimeLine = () => {\n    hoverPlayheadRef.current.style.width = 0;\n  };\n\n  const clickAudio = (key) => {\n    setIndex(key);\n    updatePlayer();\n    if (pause) {\n      playerRef.current.play();\n    }\n  };\n\n  return {\n    resetTimeLine,\n    hoverTimeLine,\n    changeCurrentTime,\n    formatTime,\n    prevSong,\n    nextSong,\n    playOrPause,\n    timeUpdate,\n    updatePlayer,\n    clickAudio,\n  };\n}\n","/Users/basilevernouillet/work/perso/bazify/cra-front/src/hooks/usePlay.js",[],"/Users/basilevernouillet/work/perso/bazify/cra-front/src/hooks/useMediaSession.js",[],"/Users/basilevernouillet/work/perso/bazify/cra-front/src/Player.old.jsx",["73","74","75","76","77","78","79","80","81"],"import { useEffect, useRef, useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useQuery } from \"react-query\";\n\nimport { getSongs } from \"./api\";\nimport styles from \"./App.module.scss\";\n\nfunction Player() {\n  const { isLoading, error, data: musics } = useQuery(\"songs\", getSongs);\n  const [currentSong, setCurrentSong] = useState({});\n  const [index, setIndex] = useState(0);\n  const [pause, setPause] = useState(false);\n  const [currentTime, setCurrentTime] = useState(\"0:00\");\n\n  const playerRef = useRef();\n  const timelineRef = useRef();\n  const hoverPlayheadRef = useRef();\n  const playheadRef = useRef();\n\n  useEffect(() => {\n    if (musics) {\n      setCurrentSong(musics[index]);\n    }\n  }, [musics, index]);\n\n  useEffect(() => {\n    playerRef.current.addEventListener(\"timeupdate\", timeUpdate, false);\n    playerRef.current.addEventListener(\"ended\", nextSong, false);\n    timelineRef.current.addEventListener(\"click\", changeCurrentTime, false);\n    timelineRef.current.addEventListener(\"mousemove\", hoverTimeLine, false);\n    timelineRef.current.addEventListener(\"mouseout\", resetTimeLine, false);\n\n    return () => {\n      playerRef.current.removeEventListener(\"timeupdate\", timeUpdate);\n      playerRef.current.removeEventListener(\"ended\", nextSong);\n      timelineRef.current.removeEventListener(\"click\", changeCurrentTime);\n      timelineRef.current.removeEventListener(\"mousemove\", hoverTimeLine);\n      timelineRef.current.removeEventListener(\"mouseout\", resetTimeLine);\n    };\n  }, []);\n\n  const changeCurrentTime = (e) => {\n    const duration = playerRef.current.duration;\n\n    const playheadWidth = timelineRef.current.offsetWidth;\n    const offsetWidth = timelineRef.current.offsetLeft;\n    const userClickWidth = e.clientX - offsetWidth;\n\n    const userClickWidthInPercent = (userClickWidth * 100) / playheadWidth;\n\n    playheadRef.current.style.width = userClickWidthInPercent + \"%\";\n    playerRef.current.currentTime = (duration * userClickWidthInPercent) / 100;\n  };\n\n  const hoverTimeLine = (e) => {\n    const duration = playerRef.current.duration;\n\n    const playheadWidth = timelineRef.current.offsetWidth;\n\n    const offsetWidth = timelineRef.current.offsetLeft;\n    const userClickWidth = e.clientX - offsetWidth;\n    const userClickWidthInPercent = (userClickWidth * 100) / playheadWidth;\n\n    if (userClickWidthInPercent <= 100) {\n      hoverPlayheadRef.current.style.width = userClickWidthInPercent + \"%\";\n    }\n\n    const time = (duration * userClickWidthInPercent) / 100;\n\n    if (time >= 0 && time <= duration) {\n      hoverPlayheadRef.current.dataset.content = formatTime(time);\n    }\n  };\n\n  const resetTimeLine = () => {\n    hoverPlayheadRef.current.style.width = 0;\n  };\n\n  const timeUpdate = () => {\n    const duration = playerRef.current.duration;\n    const timelineWidth =\n      timelineRef.current.offsetWidth - playheadRef.current.offsetWidth;\n    const playPercent = 100 * (playerRef.current.currentTime / duration);\n    playheadRef.current.style.width = playPercent + \"%\";\n    setCurrentTime(formatTime(parseInt(playerRef.current.currentTime)));\n  };\n\n  const formatTime = (currentTime) => {\n    const minutes = Math.floor(currentTime / 60);\n    let seconds = Math.floor(currentTime % 60);\n\n    seconds = seconds >= 10 ? seconds : \"0\" + (seconds % 60);\n\n    const formatTime = minutes + \":\" + seconds;\n\n    return formatTime;\n  };\n\n  const updatePlayer = () => {\n    const currentSong = musics[index];\n    const audio = new Audio(currentSong.s3_link);\n    playerRef.current.load();\n  };\n\n  const nextSong = () => {\n    setIndex((index + 1) % musics.length);\n    updatePlayer();\n    if (pause) {\n      playerRef.current.play();\n    }\n  };\n\n  const prevSong = () => {\n    setIndex((index + musics.length - 1) % musics.length);\n    updatePlayer();\n    if (pause) {\n      playerRef.current.play();\n    }\n  };\n\n  const playOrPause = () => {\n    const currentSong = musics[index];\n    const audio = new Audio(currentSong.s3_link);\n    if (!pause) {\n      playerRef.current.play();\n    } else {\n      playerRef.current.pause();\n    }\n    setPause((pause) => !pause);\n  };\n\n  const clickAudio = (key) => {\n    setIndex(key);\n    updatePlayer();\n    if (pause) {\n      playerRef.current.play();\n    }\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>{currentSong.title}</title>\n      </Helmet>\n      <div className={styles.card}>\n        <div className={styles[\"current-song\"]}>\n          <audio ref={playerRef}>\n            <source src={currentSong.s3_link} type=\"audio/ogg\" />\n            Your browser does not support the audio element.\n          </audio>\n          <div className={styles[\"img-wrap\"]}>\n            <img src={currentSong.album?.picture} />\n          </div>\n          <span className={styles[\"song-name\"]}>{currentSong.title}</span>\n          <span className={styles[\"song-autor\"]}>\n            {currentSong.artist?.name}\n          </span>\n\n          <div className={styles.time}>\n            <div className={styles[\"current-time\"]}>{currentTime}</div>\n            <div className={styles[\"end-time\"]}>{currentSong.duration}</div>\n          </div>\n\n          <div ref={timelineRef} id=\"timeline\">\n            <div ref={playheadRef} id=\"playhead\"></div>\n            <div\n              ref={hoverPlayheadRef}\n              className={styles[\"hover-playhead\"]}\n              data-content=\"0:00\"\n            ></div>\n          </div>\n\n          <div className={styles.controls}>\n            <button\n              onClick={prevSong}\n              className={`${styles.prev} ${styles[\"prev-next\"]} ${styles[\"current-btn\"]}`}\n            >\n              <i className={`${styles.fas} ${styles[\"fa-backward\"]}`}></i>\n            </button>\n\n            <button\n              onClick={playOrPause}\n              className={`${styles.play} ${styles[\"current-btn\"]}`}\n            >\n              {!pause ? (\n                <i className={`${styles.fas} ${styles[\"fa-play\"]}`}></i>\n              ) : (\n                <i className={`${styles.fas} ${styles[\"fa-pause\"]}`}></i>\n              )}\n            </button>\n            <button\n              onClick={nextSong}\n              className={`${styles.next} ${styles[\"prev-next\"]} ${styles[\"current-btn\"]}`}\n            >\n              <i className={`${styles.fas} ${styles[\"fa-forward\"]}`}></i>\n            </button>\n          </div>\n        </div>\n        <div className={styles[\"play-list\"]}>\n          {musics?.map((music, key = 0) => (\n            <div\n              key={key}\n              onClick={() => clickAudio(key)}\n              className={\n                `${styles.track} ` +\n                (index === key && !pause ? `${styles[\"current-audio\"]}` : \"\") +\n                (index === key && pause ? `${styles[\"play-now\"]}` : \"\")\n              }\n            >\n              <img\n                className={styles[\"track-img\"]}\n                src={music.album?.picture}\n                alt={music.album?.title}\n              />\n              <div className={styles[\"track-discr\"]}>\n                <span className={styles[\"track-name\"]}>{music.title}</span>\n                <span className={styles[\"track-author\"]}>\n                  {music?.artist?.name}\n                </span>\n              </div>\n              <span className={styles[\"track-duration\"]}>\n                {index === key ? currentTime : currentSong.duration || \"3:00\"}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Player;\n","/Users/basilevernouillet/work/perso/bazify/cra-front/src/CurrentSong.copy.tsx",[],"/Users/basilevernouillet/work/perso/bazify/cra-front/src/hooks/useAudioPlayer.ts",["82"],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":16,"column":6,"nodeType":"89","endLine":16,"endColumn":14,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"91","line":32,"column":6,"nodeType":"89","endLine":32,"endColumn":19,"suggestions":"92"},{"ruleId":"87","severity":1,"message":"93","line":36,"column":6,"nodeType":"89","endLine":36,"endColumn":19,"suggestions":"94"},{"ruleId":"83","replacedBy":"95"},{"ruleId":"85","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":22,"column":11,"nodeType":"99","messageId":"100","endLine":22,"endColumn":24},{"ruleId":"97","severity":1,"message":"101","line":42,"column":11,"nodeType":"99","messageId":"100","endLine":42,"endColumn":16},{"ruleId":"97","severity":1,"message":"101","line":70,"column":11,"nodeType":"99","messageId":"100","endLine":70,"endColumn":16},{"ruleId":"97","severity":1,"message":"102","line":9,"column":11,"nodeType":"99","messageId":"100","endLine":9,"endColumn":20},{"ruleId":"97","severity":1,"message":"103","line":9,"column":22,"nodeType":"99","messageId":"100","endLine":9,"endColumn":27},{"ruleId":"87","severity":1,"message":"104","line":35,"column":17,"nodeType":"99","endLine":35,"endColumn":24},{"ruleId":"87","severity":1,"message":"105","line":38,"column":19,"nodeType":"99","endLine":38,"endColumn":26},{"ruleId":"87","severity":1,"message":"106","line":40,"column":6,"nodeType":"89","endLine":40,"endColumn":8,"suggestions":"107"},{"ruleId":"97","severity":1,"message":"98","line":81,"column":11,"nodeType":"99","messageId":"100","endLine":81,"endColumn":24},{"ruleId":"97","severity":1,"message":"101","line":101,"column":11,"nodeType":"99","messageId":"100","endLine":101,"endColumn":16},{"ruleId":"97","severity":1,"message":"101","line":123,"column":11,"nodeType":"99","messageId":"100","endLine":123,"endColumn":16},{"ruleId":"108","severity":1,"message":"109","line":152,"column":13,"nodeType":"110","endLine":152,"endColumn":53},{"ruleId":"87","severity":1,"message":"111","line":9,"column":3,"nodeType":"99","endLine":9,"endColumn":12,"suggestions":"112"},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isLoading'. Either include it or remove the dependency array.","ArrayExpression",["115"],"React Hook useEffect has missing dependencies: 'nextSong' and 'prevSong'. Either include them or remove the dependency array.",["116"],"React Hook useEffect has a missing dependency: 'playerRef'. Either include it or remove the dependency array.",["117"],["113"],["114"],"no-unused-vars","'timelineWidth' is assigned a value but never used.","Identifier","unusedVar","'audio' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","The ref value 'playerRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'playerRef.current' to a variable inside the effect, and use that variable in the cleanup function.","The ref value 'timelineRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'timelineRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'hoverTimeLine', 'nextSong', and 'timeUpdate'. Either include them or remove the dependency array.",["118"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect contains a call to 'setClickedTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [playing, clickedTime, curTime] as a second argument to the useEffect Hook.",["119"],"no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [isLoading, musics]",{"range":"130","text":"131"},"Update the dependencies array to be: [currentSong, nextSong, prevSong]",{"range":"132","text":"133"},"Update the dependencies array to be: [currentSong, playerRef]",{"range":"134","text":"135"},"Update the dependencies array to be: [hoverTimeLine, nextSong, timeUpdate]",{"range":"136","text":"137"},"Add dependencies array: [playing, clickedTime, curTime]",{"range":"138","text":"139"},[466,474],"[isLoading, musics]",[762,775],"[currentSong, nextSong, prevSong]",[834,847],"[currentSong, playerRef]",[1518,1520],"[hoverTimeLine, nextSong, timeUpdate]",[1171,1171],", [playing, clickedTime, curTime]"]